{"version":3,"sources":["webpack:///./src/templates/culture-page.js"],"names":["CulturePageTemplate","props","page","className","style","backgroundImage","boxShadow","backgroundColor","color","padding","frontmatter","title","bodyIsMarkdown","source","html","content","purpose","gallery","map","galleryImage","index","key","width","height","imageInfo","name","CulturePage","data","markdownRemark","seo","seoTitle","seoDescription","description","browserTitle","culturePageQuery"],"mappings":"qHAAA,sNAWaA,EAAsB,SAACC,GAAW,IACrCC,EAASD,EAATC,KAIR,OACE,6BAASC,UAAU,gBACjB,yBAAKA,UAAU,qCACb,yBACEA,UAAU,0CACVC,MAAO,CACLC,gBAAgB,6BAGlB,wBACEF,UAAU,iCACVC,MAAO,CACLE,UAAW,oCACXC,gBAAiB,OACjBC,MAAO,QACPC,QAAS,SAGVP,EAAKQ,YAAYC,QAGtB,6BAASR,UAAU,WACjB,wBAAIA,UAAU,iBAAiB,UAG9BD,EAAKU,eACJ,kBAAC,IAAD,CAAeT,UAAU,sBAAsBU,OAAQX,EAAKY,OAE5D,kBAAC,IAAD,CAAaX,UAAU,sBAAsBY,QAASb,EAAKY,SAIjE,6BAASX,UAAU,mCACjB,yBAAKA,UAAU,+BACb,wBAAIA,UAAU,iBAAiBD,EAAKQ,YAAYM,QAAQL,OACxD,wBAAIR,UAAU,gBACXD,EAAKQ,YAAYM,QAAQC,QAAQC,KAAI,SAACC,EAAcC,GAAf,OACpC,wBAAIC,IAAKD,EAAOjB,UAAU,oBACxB,yBACEC,MAAO,CAAEkB,MAAO,QAASC,OAAQ,QACjCpB,UAAU,yBAEV,kBAAC,IAAD,CAAwBqB,UAAWL,KAErC,0BAAMhB,UAAU,wBACbgB,EAAaM,eAmCjBC,UAxBK,SAAC,GAAc,IACTxB,EADQ,EAAXyB,KACbC,eADwB,EAM5B1B,EAHFQ,YACEmB,IAAcC,EAJc,EAIrBnB,MAA8BoB,EAJT,EAIJC,YAA6BC,EAJzB,EAIyBA,aAIzD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,0BAAMR,KAAK,QAAQV,QAASe,IAC5B,0BAAML,KAAK,cAAcV,QAASgB,IAClC,+BAAQE,IAEV,kBAACjC,EAAD,CAAqBE,KAAI,iBAAOA,EAAP,CAAaU,gBAAgB,QAWrD,IAAMsB,EAAgB","file":"component---src-templates-culture-page-js-fbdcb6f798a156c4cb76.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { graphql } from \"gatsby\";\nimport ReactMarkdown from \"react-markdown\";\nimport Helmet from \"react-helmet\";\n\nimport Layout from \"../components/Layout\";\nimport HTMLContent from \"../components/Content\";\nimport \"../styles/culture-page.scss\";\nimport PreviewCompatibleImage from \"../components/PreviewCompatibleImage\";\n\nexport const CulturePageTemplate = (props) => {\n  const { page } = props;\n  // const str = page.frontmatter.mainImage.image;\n  const str = \"/img/blog-index.jpg\";\n\n  return (\n    <article className=\"culture-page\">\n      <div className=\"culture-page-container  container\">\n        <div\n          className=\"full-width-image-container margin-top-0\"\n          style={{\n            backgroundImage: `url(${str})`,\n          }}\n        >\n          <h1\n            className=\"has-text-weight-bold is-size-1\"\n            style={{\n              boxShadow: \"0.5rem 0 0 #f40, -0.5rem 0 0 #f40\",\n              backgroundColor: \"#f40\",\n              color: \"white\",\n              padding: \"1rem\",\n            }}\n          >\n            {page.frontmatter.title}\n          </h1>\n        </div>\n        <section className=\"section\">\n          <h2 className=\"culture-title\">{\"瑜伽文化介绍\"}</h2>\n          {/* The page.html is actually markdown when viewing the page from the netlify CMS,\n              so we must use the ReactMarkdown component to parse the markdown in that case  */}\n          {page.bodyIsMarkdown ? (\n            <ReactMarkdown className=\"culture-description\" source={page.html} />\n          ) : (\n            <HTMLContent className=\"culture-description\" content={page.html} />\n          )}\n        </section>\n      </div>\n      <section className=\"section culture culture-culture\">\n        <div className=\"container culture-container\">\n          <h2 className=\"culture-title\">{page.frontmatter.purpose.title}</h2>\n          <ul className=\"culture-list\">\n            {page.frontmatter.purpose.gallery.map((galleryImage, index) => (\n              <li key={index} className=\"culture-listItem\">\n                <div\n                  style={{ width: \"300px\", height: \"auto\" }}\n                  className=\"culture-listItemImage\"\n                >\n                  <PreviewCompatibleImage imageInfo={galleryImage} />\n                </div>\n                <span className=\"culture-listItemName\">\n                  {galleryImage.name}\n                </span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </section>\n    </article>\n  );\n};\n\nconst CulturePage = ({ data }) => {\n  const { markdownRemark: page } = data;\n  const {\n    frontmatter: {\n      seo: { title: seoTitle, description: seoDescription, browserTitle },\n    },\n  } = page;\n\n  return (\n    <Layout>\n      <Helmet>\n        <meta name=\"title\" content={seoTitle} />\n        <meta name=\"description\" content={seoDescription} />\n        <title>{browserTitle}</title>\n      </Helmet>\n      <CulturePageTemplate page={{ ...page, bodyIsMarkdown: false }} />\n    </Layout>\n  );\n};\n\nCulturePage.propTypes = {\n  data: PropTypes.object.isRequired,\n};\n\nexport default CulturePage;\n\nexport const culturePageQuery = graphql`\n  query CulturePage($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        title\n        mainImage {\n          image {\n            childImageSharp {\n              fluid(maxWidth: 2048, quality: 100) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n          imageAlt\n        }\n        purpose {\n          title\n          gallery {\n            image {\n              childImageSharp {\n                fluid(maxWidth: 2048, quality: 100) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            imageAlt\n            name\n          }\n        }\n        seo {\n          browserTitle\n          title\n          description\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}